
/******************************************************************************
*
* Freescale Semiconductor Inc.
* (c) Copyright 2013 Freescale Semiconductor, Inc.
* ALL RIGHTS RESERVED.
*
***************************************************************************
* @file LED_GPIO_project.c
*
* @author Riccardo Luciani
*
* @version 0.0.1
*
* @date Jun. 25, 2016
*
* @brief Firmware for NIRS prototype using Freescale ARM 32bit microcontroller 
*
*******************************************************************************/

#include "common.h"
#include "ics.h"
#include "rtc.h"
#include "uart.h"
#include "sysinit.h"
#include "gpio.h"
#include "adc.h"
#include "spi.h"
#include "sim.h"
#include "MKE04Z4.h"

/******************************************************************************
* Global variables
******************************************************************************/

/******************************************************************************
* Constants and macros
******************************************************************************/
#define SEND_BUF_LEN    50
#define ITER            10//1000
#define PAUSA           20000
#define SPI0_TX_DATA_SIZE		    1
#define SPI_BIT_RATE                1000000     /* ~1Mbps */
#define ATTESA          0x08
#define N_RIP             20

/******************************************************************************
* Local types
******************************************************************************/

/******************************************************************************
* Local function prototypes
******************************************************************************/

/******************************************************************************
* Local variables
******************************************************************************/
int trigger;
int count;
uint8_t send_buf[SEND_BUF_LEN] = "\r\nUART send char by polling\r\n"; //{0};
static SPI_WidthType gu8SPI0_RxBuff[SPI0_TX_DATA_SIZE];
static SPI_WidthType gu8SPI0_TxBuff[SPI0_TX_DATA_SIZE];
int i;
uint16_t  arr1[1] = {0};
uint8_t  arr2[2]={0};
/******************************************************************************
* Local functions
******************************************************************************/
int main (void);
void RTC_Task(void);
void Set_LED(int Led_Selection);
void From_uint16_t_to_uint8_t(uint16_t *pArr1);
/******************************************************************************
* Global functions
******************************************************************************/


/********************************************************************/
int main (void)
{   
    ADC_ConfigType  sADC_Config = {0};  
    UART_ConfigType sConfig;
    SPI_ConfigType sSPIConfig = {0};
   
    RTC_ConfigType  sRTCConfig;
    RTC_ConfigType  *pRTCConfig = &sRTCConfig;       
    
    /* Perform processor initialization */
    sysinit();

    /* initialize SPI0 as master    */
    sSPIConfig.u32BitRate = SPI_BIT_RATE;
    sSPIConfig.u32BusClkHz = BUS_CLK_HZ;
    sSPIConfig.sSettings.bModuleEn             = 1;
    sSPIConfig.sSettings.bMasterMode           = 1;
    sSPIConfig.sSettings.bClkPhase1            = 1;
    sSPIConfig.sSettings.bClkPolarityLow       = 1;
    sSPIConfig.sSettings.bClkPhase1            = 1;
    sSPIConfig.sSettings.bBidirectionModeEn    = 0; 
    sSPIConfig.sSettings.bMasterAutoDriveSS    = 1;
 
    SPI_Init(SPI0, &sSPIConfig);
  
    
    /* UART initialization*/
    sConfig.u32SysClkHz = BUS_CLK_HZ;
    sConfig.u32Baudrate = UART_PRINT_BITRATE;
    
    UART_Init(UART0,&sConfig);
     
    printf("Inizio del programma\r\n"); 
    UART_SendWait(UART0, send_buf, 50);
    
    /* configure RTC to 1Hz interrupt frequency */
    pRTCConfig->u16ModuloValue = 300; /*Interrupt ogni ~ 12.5ms*/ //601; /*Interrupt ogni ~ 25 ms*/                                     
    pRTCConfig->bInterruptEn   = RTC_INTERRUPT_ENABLE;     /* enable interrupt */
    pRTCConfig->bClockSource   = RTC_CLKSRC_BUS;          /*clock source is 1khz*/
    pRTCConfig->bClockPresaler = RTC_CLK_PRESCALER_1000;    /*prescaler is 64*/
    
    RTC_SetCallback(RTC_Task);
    RTC_Init(pRTCConfig);
    
    //SIM_RemapSPI0Pin();
    
    printf("Inizio del programma\r\n");
    UART_SendWait(UART0, send_buf, 50);
    
    
    /* initiaze ADC module */
    sADC_Config.u8ClockDiv = ADC_ADIV_DIVIDE_4;
    sADC_Config.u8ClockSource = CLOCK_SOURCE_BUS_CLOCK;
    sADC_Config.u8Mode = ADC_MODE_12BIT;
    
    ADC_Init( ADC, &sADC_Config);
    
    printf("Inizio del programma\r\n");
    UART_SendWait(UART0, send_buf, 50);  

    trigger = 0;
    count=0;
    
    /* way 1. GPIO initialize by multiple pin mask */

    GPIO_Init(GPIOA, GPIO_PTA2_MASK, GPIO_PinOutput);
    GPIO_Toggle(GPIOA, GPIO_PTA2_MASK);
    
    GPIO_Init(GPIOA, GPIO_PTA3_MASK, GPIO_PinOutput);
    
    printf("Inizio del programma\r\n");
    UART_SendWait(UART0, send_buf, 50);
    
       
    while(1)
	{
            
	} 

}

/*****************************************************************************//*!
*
* @brief callback routine of RTC driver which does what you want to do at 
*        every RTC period.
*        
* @param  none
*
* @return none
*
* @ Pass/ Fail criteria: none
*****************************************************************************/

void RTC_Task(void)
{
    if (trigger == 0)
    {
      if (count == 0)
      {
        Set_LED(1);
 
        count = 1;
        
        for(int i=0; i<PAUSA; i++); // Aspetto un poco prima di iniziare la conversione
        for(int i=0; i<N_RIP; i++)
        {              
           arr1[0]=(uint16_t)ADC_PollRead(ADC,ADC_CHANNEL_AD10);
           From_uint16_t_to_uint8_t(arr1); // Ricevo arr2
           arr2[1] |= 144; //Indico LED 1 con stato ON;
           UART_SendWait(UART0,arr2,2);
        }       
 
      }
      else if (count == 1)
      {        
        Set_LED(0);
       
        count = 0;
        for(int i=0; i<PAUSA; i++); // Aspetto un poco prima di iniziare la conversione
        for(int i=0; i<N_RIP; i++)
        {              
           arr1[0]=(uint16_t)ADC_PollRead(ADC,ADC_CHANNEL_AD10);
           From_uint16_t_to_uint8_t(arr1); // Ricevo arr2
           arr2[1] |= 16; //Indico LED 1 con stato OFF;
           UART_SendWait(UART0,arr2,2);
        }
        trigger = 1;
      }
    }
    else if (trigger == 1)
    {
      if (count == 0)
      {
        Set_LED(128);        
        
        count = 1;
        
        for(int i=0; i<PAUSA; i++); // Aspetto un poco prima di iniziare la conversione
        for(int i=0; i<N_RIP; i++)
        {              
           arr1[0]=(uint16_t)ADC_PollRead(ADC,ADC_CHANNEL_AD10);
           From_uint16_t_to_uint8_t(arr1); // Ricevo arr2
           arr2[1] |= 160; //Indico LED 2 con stato ON;
           UART_SendWait(UART0,arr2,2);
        }
        
      }
      else if (count == 1)
      {
        Set_LED(0);        

        count = 0;
        
        for(int i=0; i<PAUSA; i++); // Aspetto un poco prima di iniziare la conversione
        for(int i=0; i<N_RIP; i++)
        {              
           arr1[0]=(uint16_t)ADC_PollRead(ADC,ADC_CHANNEL_AD10);
           From_uint16_t_to_uint8_t(arr1); // Ricevo arr2
           arr2[1] |= 32; //Indico LED 2 con stato OFF;
           UART_SendWait(UART0,arr2,2);
        }
        
        trigger = 2;
      }
    }
    else if (trigger == 2)
    {
      if (count == 0)
      {
        Set_LED(4);        
        
        count = 1;
        
        for(int i=0; i<PAUSA; i++); // Aspetto un poco prima di iniziare la conversione
        for(int i=0; i<N_RIP; i++)
        {              
           arr1[0]=(uint16_t)ADC_PollRead(ADC,ADC_CHANNEL_AD10);
           From_uint16_t_to_uint8_t(arr1); // Ricevo arr2
           arr2[1] |= 176; //Indico LED 3 con stato ON;
           UART_SendWait(UART0,arr2,2);
        }
        
      }
      else if (count == 1)
      {
        Set_LED(0);
        
        count = 0;
        
        for(int i=0; i<PAUSA; i++); // Aspetto un poco prima di iniziare la conversione
        for(int i=0; i<N_RIP; i++)
        {              
           arr1[0]=(uint16_t)ADC_PollRead(ADC,ADC_CHANNEL_AD10);
           From_uint16_t_to_uint8_t(arr1); // Ricevo arr2
           arr2[1] |= 48; //Indico LED 3 con stato OFF;
           UART_SendWait(UART0,arr2,2);
        }
        
        trigger = 3;
      }
    }
    else if (trigger == 3)
    {
      if (count == 0)
      {
        Set_LED(32);        
        
        count = 1;
        
        for(int i=0; i<PAUSA; i++); // Aspetto un poco prima di iniziare la conversione
        for(int i=0; i<N_RIP; i++)
        {              
           arr1[0]=(uint16_t)ADC_PollRead(ADC,ADC_CHANNEL_AD10);
           From_uint16_t_to_uint8_t(arr1); // Ricevo arr2
           arr2[1] |= 192; //Indico LED 4 con stato ON;
           UART_SendWait(UART0,arr2,2);
        }
          
      }
      else if (count == 1)
      {
        Set_LED(0);        
        
        count = 0;
        
        for(int i=0; i<PAUSA; i++); // Aspetto un poco prima di iniziare la conversione
        for(int i=0; i<N_RIP; i++)
        {              
           arr1[0]=(uint16_t)ADC_PollRead(ADC,ADC_CHANNEL_AD10);
           From_uint16_t_to_uint8_t(arr1); // Ricevo arr2
           arr2[1] |= 64; //Indico LED 4 con stato OFF;
           UART_SendWait(UART0,arr2,2);
        }
        trigger = 0;
      }
    }
}


void Set_LED(int Led_Selection)
{
  
        GPIO_PinSet(GPIO_PTA2);  // Alzo OE ed eseguo le dovute modifiche
       
        gu8SPI0_TxBuff[0]=Led_Selection;     // Secondo LED acceso
        SPI_TransferWait(SPI0,gu8SPI0_RxBuff,gu8SPI0_TxBuff,SPI0_TX_DATA_SIZE);
          
        for(i=0;i<ATTESA;i++); // Breve attesa
        GPIO_Toggle(GPIOA, GPIO_PTA3_MASK); // Alzo il LE
        for(i=0;i<ATTESA;i++); // Breve attesa
        GPIO_Toggle(GPIOA, GPIO_PTA3_MASK); // Abbasso il LE
                
        for(i=0;i<ATTESA;i++); // Breve attesa
        GPIO_Toggle(GPIOA, GPIO_PTA2_MASK); // Abbasso l'OE -> LED si accende
  
}
/********************************************************************/

void From_uint16_t_to_uint8_t(uint16_t *pArr1)
{
    uint16_t arr1[1]; 
//    uint8_t arr2[2]={0};
    arr1[0]= pArr1[0];
//    printf("%d\n", arr1[0]);

//    uint8* ptr = (uint8 *) &pArr1; //cast the 16bit pointer to an 8bit pointer
    uint8* ptr = (uint8 *) &arr1; //cast the 16bit pointer to an 8bit pointer
    
    for(int i=0; i<2; i++)
    {
      arr2[i] = *ptr; //pass data to other array
      ptr++;          //move your pointer
    }
//    printf("%d %d\n",arr2[1],arr2[0]);
    
}
/********************************************************************/
